var labels = [];
var views = [];
var facilities = [];
$(document).ready(async function () {
    await getData();
    console.log(labels);


});


function drawTable() {
    var tbody = $("tbody");
    for(var i=0; i<labels.length; i++){
        tbody.append(`
            <tr>
            <td>${labels[i]}</td>
            <td>${facilities[i]}</td>
            <td>${views[i]}</td>
            
        </tr>`);
    }

}

async function   getData() {
    $.ajax({
        url: "http://192.168.137.188:8080/api/facility/report",
        type: 'GET',
        dataType: 'json', // added data type
        success: function(res) {
            console.log(res);
            $("#removableLoaderRow1").remove();
            $("#removableLoaderRow2").remove();
            $("#removableLoaderRow3").remove();
            //$("#removableLoaderRow").remove();
            for(var i=0; i<res.length; i++){
                labels.push(res[i].type);
                views.push(res[i].views);
                facilities.push(res[i].facilitiesAmount);
            }

            drawBarChart();
           drawLineChart();
           drawTable();


        },
        error: function (e) {
            console.log(e);
        }
    });

   //alert(arr);
}
function drawLineChart(){
    //line
    var ctxL = $("#lineChart")[0].getContext('2d');
    var myLineChart = new Chart(ctxL, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: "Facilities",
                data: facilities,
                backgroundColor: [
                    'rgba(105, 0, 132, .2)',
                ],
                borderColor: [
                    'rgba(200, 99, 132, .7)',
                ],
                borderWidth: 2
            },

            ]
        },
        options: {
            responsive: true
        }
    });
}
function drawBarChart(){

    var ctx = $("#myChart")[0].getContext('2d');
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'VIEWS',
                data: views,
                backgroundColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)'
                ],
                borderColor: [
                    'rgba(255,99,132,1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }
    });


}
function downloadPdf(event) {
    // get size of report page
    var reportPageHeight = $('#reportPage').innerHeight();
    var reportPageWidth = $('#reportPage').innerWidth();

    // create a new canvas object that we will populate with all other canvas objects
    var pdfCanvas = $('<canvas />').attr({
        id: "canvaspdf",
        width: reportPageWidth,
        height: reportPageHeight
    });

    // keep track canvas position
    var pdfctx = $(pdfCanvas)[0].getContext('2d');
    var pdfctxX = 0;
    var pdfctxY = 0;
    var buffer = 100;

    // for each chart.js chart

    $("canvas").each(function(index) {
        // get the chart height/width
        var canvasHeight = $(this).innerHeight();
        var canvasWidth = $(this).innerWidth();

        // draw the chart into the new canvas
        pdfctx.drawImage($(this)[0], pdfctxX, pdfctxY, canvasWidth, canvasHeight);
        pdfctxX += canvasWidth + buffer;

        // our report page is in a grid pattern so replicate that in the new canvas
        if (index % 2 === 1) {
            pdfctxX = 0;
            pdfctxY += canvasHeight + buffer;
        }
    });

    // create new pdf and add our new canvas as an image
    var pdf = new jsPDF('l', 'pt', [reportPageWidth, reportPageHeight]);
    pdf.addImage($(pdfCanvas)[0], 'PNG', 0, 0);
    pdf.addPage();
   // pdf.text(pdfctx, pdfctxY,"This report is generated by PinPoint");
    pdf.text(20, 20, 'This report is automatically created by PinPoint ');
    //pdf.text(20, 30, new Date().getDate());


    // download the pdf
    pdf.save('ReportSummaryPinPoint.pdf');
}





